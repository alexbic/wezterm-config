local wezterm = require("wezterm")

local M = {}

M.init = function(workspace_switcher)local debug = require("utils.debug")
local wezterm = require('wezterm')
local M = {}

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ Smart Workspace Switcher
M.workspace_switcher = workspace_switcher

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ zoxide –¥–ª—è macOS
workspace_switcher.zoxide_path = "/opt/homebrew/bin/zoxide"

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö workspace —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
local function get_resurrect_workspaces()
  local saved = {}
  
  -- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –æ—à–∏–±–∫–∏
  local success_paths, paths = pcall(require, "config.environment.paths")
  if not success_paths then
    wezterm.log_warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.environment.paths: " .. tostring(paths))
    return saved
  end
  
  local success_platform, platform = pcall(require, 'utils.platform')
  if not success_platform then
    wezterm.log_warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å utils.platform: " .. tostring(platform))
    return saved
  end
  
  local platform_instance = platform()
  if not platform_instance then
    wezterm.log_warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å platform")
    return saved
  end
  
  local workspace_dir = paths.resurrect_state_dir .. "workspace"

  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  if not platform_instance.directory_exists(workspace_dir) then
    wezterm.log_info("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è workspace –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " .. workspace_dir)
    return saved
  end

  -- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
  local success_files, files = pcall(platform_instance.get_files_in_directory, workspace_dir, "*.json")
  if not success_files then
    wezterm.log_warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: " .. tostring(files))
    return saved
  end

  for _, file_path in ipairs(files or {}) do
    local name = file_path:match("([^/\\]+)%.json$")
    if name then
      -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –º–æ–∂–µ–º –ª–∏ –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
      if platform_instance.file_exists(file_path) then
        table.insert(saved, {
          id = name,
          label = "üíæ " .. name,
          path = workspace_dir  -- –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å zoxide
        })
      end
    end
  end

  wezterm.log_info("–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö workspace: " .. #saved)
  return saved
end

-- –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è choices —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π resurrect –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
workspace_switcher.get_choices = function(opts)
  opts = opts or {}

  local all_choices = {}

  -- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö workspace —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  local workspace_elements = {}
  local success_workspace, ws_elements = pcall(workspace_switcher.choices.get_workspace_elements, {})
  if success_workspace and ws_elements then
    workspace_elements = ws_elements
  else
    wezterm.log_warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ workspace elements: " .. tostring(ws_elements))
  end

  -- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ zoxide —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  local zoxide_elements = {}
  local success_zoxide, z_elements = pcall(workspace_switcher.choices.get_zoxide_elements, {}, opts)
  if success_zoxide and z_elements then
    zoxide_elements = z_elements
  else
    wezterm.log_warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ zoxide elements: " .. tostring(z_elements))
  end

  -- –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ workspace –∏–∑ resurrect
  local saved_workspaces = get_resurrect_workspaces()

  -- –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ workspace (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  for _, element in ipairs(workspace_elements) do
    table.insert(all_choices, element)
  end

  -- –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ workspace
  for _, element in ipairs(saved_workspaces) do
    table.insert(all_choices, element)
  end

  -- –î–æ–±–∞–≤–ª—è–µ–º zoxide —ç–ª–µ–º–µ–Ω—Ç—ã
  for _, element in ipairs(zoxide_elements) do
    table.insert(all_choices, element)
  end

  return all_choices
end

-- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è workspace –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å –ø–æ–ª–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
wezterm.on("smart_workspace_switcher.workspace_switcher.chosen", function(window, workspace, label)
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if not window then
    wezterm.log_error("Window parameter is nil")
    return
  end
  
  if not workspace then
    wezterm.log_error("Workspace parameter is nil")
    return
  end

  debug.log("workspace", "debug_workspace_plugin_chosen", tostring(workspace), tostring(label or "–Ω–µ—Ç"))

  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π workspace (–ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É üíæ)
  if label and label:match("^üíæ ") then
    local name = label:match("^üíæ (.+)$")
    if not name then
      wezterm.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è workspace –∏–∑ label: " .. tostring(label))
      return
    end
    
    wezterm.log_info("–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π workspace: " .. name)

    -- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è resurrect
    local success_resurrect, resurrect = pcall(require, "config.resurrect")
    if not success_resurrect then
      wezterm.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.resurrect: " .. tostring(resurrect))
      return
    end
    
    if not resurrect.resurrect then
      wezterm.log_error("resurrect.resurrect –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ")
      return
    end

    -- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    local success_state, state = pcall(resurrect.resurrect.state_manager.load_state, name, "workspace")
    if not success_state then
      wezterm.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: " .. tostring(state))
      return
    end

    if state then
      -- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ workspace
      local success_switch = pcall(function()
        local active_pane = window:active_pane()
        if not active_pane then
          wezterm.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å active_pane")
          return
        end
        
        window:perform_action(wezterm.action.SwitchToWorkspace({ name = name }), active_pane)
      end)
      
      if not success_switch then
        wezterm.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ workspace")
        return
      end

      -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è workspace
      wezterm.time.call_after(0.2, function()
        local success_restore = pcall(function()
          local mux_window = window:mux_window()
          if not mux_window then
            wezterm.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å mux_window")
            return
          end
          
          resurrect.resurrect.workspace_state.restore_workspace(state, {
            window = mux_window,
            relative = true,
            restore_text = true,
            on_pane_restore = resurrect.resurrect.tab_state.default_on_pane_restore,
          })
          wezterm.log_info("Workspace " .. name .. " –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        end)
        
        if not success_restore then
          wezterm.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ workspace")
        end
      end)
    else
      wezterm.log_warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è workspace: " .. name)
    end
  else
    -- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö workspace
    local current_workspace = window:active_workspace()
    
    if workspace == current_workspace then
      wezterm.log_info("–£–∂–µ –≤ workspace: " .. workspace .. ", –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
      return
    end
    
    -- –ò—â–µ–º –æ–∫–Ω–æ —Å –Ω—É–∂–Ω—ã–º workspace
    local mux = wezterm.mux
    local found_window = nil
    
    for _, win in ipairs(mux.all_windows()) do
      if win:get_workspace() == workspace then
        found_window = win
        break
      end
    end
    
    if found_window then
      local gui_win = found_window:gui_window()
      if gui_win then
        gui_win:focus()
        gui_win:raise()
        wezterm.log_info("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ–∫–Ω–æ —Å workspace: " .. workspace)
      end
    else
      window:perform_action(wezterm.action.SwitchToWorkspace({ name = workspace }), window:active_pane())
    end
  end
end)

return M
-- EOF
end

return M
