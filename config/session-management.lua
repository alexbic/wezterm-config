-- –û–ü–ò–°–ê–ù–ò–ï: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∏ workspace
-- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç smart_workspace_switcher + resurrect.wezterm + –≤–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏

local wezterm = require('wezterm')
local session_status = require('events.session-status')
local M = {}

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤
local workspace_switcher = wezterm.plugin.require("https://github.com/MLFlexer/smart_workspace_switcher.wezterm")
local resurrect = wezterm.plugin.require("https://github.com/MLFlexer/resurrect.wezterm")

-- –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
local current_operation = nil
local session_mode = nil

-- === –ù–ê–°–¢–†–û–ô–ö–ò ===
M.config = {
  zoxide_path = "/opt/homebrew/bin/zoxide",
  auto_save_interval = 300, -- 5 –º–∏–Ω—É—Ç
  max_nlines = 5000,
  session_prefix = "session_",
  workspace_prefix = "ws_",
}

-- === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–õ–ê–ì–ò–ù–û–í ===
M.setup = function(user_config)
  if user_config then
    for k, v in pairs(user_config) do
      M.config[k] = v
    end
  end
  
  -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ workspace_switcher
  workspace_switcher.zoxide_path = M.config.zoxide_path
  
  -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ resurrect
  resurrect.state_manager.periodic_save({
    interval_seconds = M.config.auto_save_interval,
    save_tabs = true,
    save_windows = true,
    save_workspaces = true,
  })
  resurrect.state_manager.set_max_nlines(M.config.max_nlines)
  
  -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
  M.setup_events()
  
  wezterm.log_info("üéØ Session Management –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
  return M
end

-- === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- 1. –£–º–Ω—ã–π –ø–æ–∏—Å–∫ workspace (—Å zoxide)
M.switch_workspace = function()
  return wezterm.action_callback(function(window, pane)
    session_status.set_mode("workspace_search")
    current_operation = "workspace_switch"
    session_mode = "workspace_search"
    
    window:perform_action(workspace_switcher.switch_workspace(), pane)
  end)
end

-- 2. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π workspace
M.switch_to_previous_workspace = function()
  return wezterm.action_callback(function(window, pane)
    session_status.set_mode("workspace_search")
    current_operation = "workspace_prev"
    session_mode = "workspace_search"
    
    window:perform_action(workspace_switcher.switch_to_prev_workspace(), pane)
  end)
end

-- 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∏–º–µ–Ω–µ–º
M.save_session = function()
  return wezterm.action_callback(function(window, pane)
    session_status.set_mode("session_control")
    current_operation = "session_save"
    session_mode = "session_control"
    
    window:perform_action(
      wezterm.action.PromptInputLine({
        description = "üíæ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:",
        action = wezterm.action_callback(function(inner_window, inner_pane, line)
          if line and line ~= "" then
            session_status.start_loading(window)
            
            local session_name = M.config.session_prefix .. line
            
            wezterm.time.call_after(0.2, function()
              local state = resurrect.workspace_state.get_workspace_state()
              if state then
                resurrect.state_manager.save_state(state, session_name)
                wezterm.log_info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é: " .. session_name)
              else
                session_status.save_session_error(window, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
              end
            end)
          else
            session_status.clear_saved_mode()
            current_operation = nil
            session_mode = nil
          end
        end),
      }),
      pane
    )
  end)
end

-- 4. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ fuzzy finder
M.load_session = function()
  return wezterm.action_callback(function(window, pane)
    session_status.set_mode("session_control") 
    current_operation = "session_load"
    session_mode = "session_control"
    
    session_status.load_session_start(window)
    
    -- –ò—Å–ø–æ–ª—å–∑—É–µ–º fuzzy_loader –æ—Ç resurrect –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏
    resurrect.fuzzy_loader.fuzzy_load(
      window, 
      pane, 
      function(id, label)
        current_operation = "session_restore"
        session_status.start_loading(window)
        
        wezterm.log_info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é: " .. (label or id))
        
        wezterm.time.call_after(0.3, function()
          -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
          local type = string.match(id, "^([^/]+)")
          local clean_id = string.match(id, "([^/]+)$")
          clean_id = clean_id and string.match(clean_id, "(.+)%..+$") or clean_id
          
          local state
          if type == "workspace" then
            state = resurrect.state_manager.load_state(clean_id, "workspace")
            if state then
              resurrect.workspace_state.restore_workspace(state, {
                relative = false,
                restore_text = true,
              })
            end
          elseif type == "window" then
            state = resurrect.state_manager.load_state(clean_id, "window")
            if state then
              resurrect.window_state.restore_window(pane:window(), state, {
                relative = false,
                restore_text = true,
              })
            end
          elseif type == "tab" then
            state = resurrect.state_manager.load_state(clean_id, "tab")
            if state then
              resurrect.tab_state.restore_tab(pane:tab(), state, {
                relative = false,
                restore_text = true,
              })
            end
          end
          
          if state then
            local display_name = label or clean_id or "—Å–µ—Å—Å–∏—è"
            session_status.load_session_success(window, display_name)
          else
            session_status.load_session_error(window, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
          end
        end)
      end,
      {
        title = "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏",
        description = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: Enter = –∑–∞–≥—Ä—É–∑–∏—Ç—å, Esc = –æ—Ç–º–µ–Ω–∞, / = —Ñ–∏–ª—å—Ç—Ä",
        fuzzy_description = "–ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏: ",
        is_fuzzy = true,
      }
    )
  end)
end

-- 5. –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ fuzzy finder
M.delete_session = function()
  return wezterm.action_callback(function(window, pane)
    session_status.set_mode("session_control")
    current_operation = "session_delete"
    session_mode = "session_control"
    
    session_status.delete_session_start(window)
    
    resurrect.fuzzy_loader.fuzzy_load(
      window, 
      pane, 
      function(id, label)
        local display_name = label or string.match(id, "([^/]+)$") or "—Å–µ—Å—Å–∏—è"
        
        wezterm.log_info("üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é: " .. display_name)
        resurrect.state_manager.delete_state(id)
        
        session_status.delete_session_success(window, display_name)
        current_operation = nil
        session_mode = nil
      end,
      {
        title = "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏",
        description = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: Enter = —É–¥–∞–ª–∏—Ç—å, Esc = –æ—Ç–º–µ–Ω–∞, / = —Ñ–∏–ª—å—Ç—Ä",
        fuzzy_description = "–ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ",
        is_fuzzy = true,
      }
    )
  end)
end

-- 6. –ü–æ–∫–∞–∑ –≤—Å–µ—Ö workspace (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä)
M.show_workspaces = function()
  return wezterm.action_callback(function(window, pane)
    session_status.set_mode("workspace_search")
    current_operation = "workspace_list" 
    session_mode = "workspace_search"
    
    window:perform_action(
      wezterm.action.ShowLauncherArgs({ 
        flags = "FUZZY|WORKSPACES",
        title = "üè† Workspace Manager"
      }), 
      pane
    )
  end)
end

-- === –°–û–ë–´–¢–ò–Ø –ü–õ–ê–ì–ò–ù–û–í ===

M.setup_events = function()
  -- –°–æ–±—ã—Ç–∏—è workspace_switcher
  wezterm.on('smart_workspace_switcher.workspace_switcher.start', function(window)
    wezterm.log_info("üîç Workspace switcher: –ø–æ–∏—Å–∫ –Ω–∞—á–∞—Ç")
  end)
  
  wezterm.on('smart_workspace_switcher.workspace_switcher.canceled', function(window)
    wezterm.log_info("‚ùå Workspace switcher: –æ—Ç–º–µ–Ω–µ–Ω–æ")
    if current_operation and session_mode then
      session_status.clear_saved_mode()
      current_operation = nil
      session_mode = nil
    end
  end)
  
  wezterm.on('smart_workspace_switcher.workspace_switcher.chosen', function(window, workspace)
    local workspace_name = workspace:match("([^/]+)$") or workspace
    wezterm.log_info("‚úÖ Workspace –≤—ã–±—Ä–∞–Ω: " .. workspace_name)
    
    if current_operation == "workspace_switch" or current_operation == "workspace_prev" then
      wezterm.time.call_after(0.5, function()
        session_status.show_notification(window, workspace_name, "üè†", "#50fa7b", 2000, true)
        current_operation = nil
        session_mode = nil
      end)
    end
  end)
  
  wezterm.on('smart_workspace_switcher.workspace_switcher.created', function(window, workspace)
    local workspace_name = workspace:match("([^/]+)$") or workspace
    wezterm.log_info("üÜï Workspace —Å–æ–∑–¥–∞–Ω: " .. workspace_name)
    
    wezterm.time.call_after(0.5, function()
      session_status.show_notification(window, "–°–æ–∑–¥–∞–Ω: " .. workspace_name, "üÜï", "#50fa7b", 3000, true)
      current_operation = nil
      session_mode = nil
    end)
  end)
  
  -- –°–æ–±—ã—Ç–∏—è resurrect
  wezterm.on('resurrect.save_state.finished', function(session_path)
    wezterm.log_info("üíæ Resurrect: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - " .. session_path)
    
    if current_operation == "session_save" then
      local path = session_path:match(".+/([^/]+)$")
      local name = path and path:match("^(.+)%.json$") or "—Å–µ—Å—Å–∏—è"
      local display_name = name:gsub(M.config.session_prefix, "")
      
      local window = wezterm.mux.get_active_window()
      if window then
        session_status.save_session_success(window, display_name)
        current_operation = nil
        session_mode = nil
      end
    end
  end)
  
  wezterm.on('resurrect.load_state.finished', function(name, type)
    wezterm.log_info("üîÑ Resurrect: –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - " .. name .. " (" .. type .. ")")
    
    if current_operation == "session_restore" then
      current_operation = nil
      session_mode = nil
    end
  end)
  
  wezterm.on('resurrect.error', function(error)
    wezterm.log_error("‚ùå Resurrect error: " .. tostring(error))
    
    local window = wezterm.mux.get_active_window()
    if window then
      if current_operation == "session_save" then
        session_status.save_session_error(window, tostring(error))
      else
        session_status.load_session_error(window, tostring(error))
      end
      current_operation = nil
      session_mode = nil
    end
  end)
  
  -- –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ª–∞—É–Ω—á–µ—Ä–∞ workspace
  wezterm.on('launcher-canceled', function(window)
    if current_operation == "workspace_list" and session_mode == "workspace_search" then
      session_status.clear_saved_mode()
      current_operation = nil
      session_mode = nil
    end
  end)
end

return M
