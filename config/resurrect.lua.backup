-- cat > ~/.config/wezterm/config/resurrect.lua << 'EOF'
--
-- ОПИСАНИЕ: Объединенный модуль для сохранения и восстановления сессий
-- Включает всю функциональность плагина resurrect.wezterm: 
-- инициализацию, настройку, обработчики событий, и вспомогательные функции.
-- Централизует всю логику сохранения и восстановления сессий.
--
-- ЗАВИСИМОСТИ: events.session-status

local wezterm = require('wezterm')
local session_status = require('events.session-status')
local environment = require('config.environment')
local M = {}

-- Инициализация плагина resurrect.wezterm
local resurrect = wezterm.plugin.require("https://github.com/MLFlexer/resurrect.wezterm")
M.resurrect = resurrect

-- Настройка периодического сохранения каждые 5 минут
resurrect.state_manager.periodic_save({
  interval_seconds = 300,
  save_tabs = true,
  save_windows = true,
  save_workspaces = true,
})

-- Ограничение на количество сохраняемых строк
resurrect.state_manager.set_max_nlines(5000)

-- Настройка папки сохранения для нашего проекта (кроссплатформенно)
local paths = require("config.environment.paths")
resurrect.state_manager.change_state_save_dir(paths.resurrect_state_dir)
-- Переменные для отслеживания состояния
local is_periodic_save = false
local is_user_save = false
local current_save_name = ""
local current_operation = nil
local selected_session_name = nil
local list_shown_timer = nil
local pending_operation = nil
local save_timeout_timer = nil
local pending_restore = nil

-- Безопасная функция для получения состояния workspace
local function safe_get_workspace_state()
  local ok, state = pcall(function()
    return resurrect.workspace_state.get_workspace_state()
  end)
  
  if ok then
    wezterm.log_info("🎯 Состояние workspace получено успешно")
    return state
  else
    wezterm.log_info("❌ Ошибка получения состояния workspace: " .. tostring(state))
    return nil
  end
end

-- Функция для принудительного закрытия всех вкладок
local function safe_clear_tabs(window)
  local mux_window = window:mux_window()
  local tabs = mux_window:tabs()
  
  wezterm.log_info("🔄 Безопасная очистка - найдено вкладок: " .. #tabs)
  
  -- Оставляем только первую вкладку, остальные закрываем
  for i = #tabs, 2, -1 do
    local tab = tabs[i]
    if tab then
      wezterm.log_info("🔄 Закрываем вкладку " .. i)
      tab:activate()
      window:perform_action(wezterm.action.CloseCurrentTab({confirm = false}), tab:active_pane())
    end
  end
  
  wezterm.log_info("🔄 Очистка завершена, осталась 1 вкладка")
end

-- Функция для выполнения восстановления состояния
local function perform_restore(window, pane, id, session_name, type_info)
  wezterm.log_info("🎯 === НАЧИНАЕМ ВОССТАНОВЛЕНИЕ ===")
  wezterm.log_info("🎯 Состояние: " .. (session_name or "unknown"))
  wezterm.log_info("🎯 ID: " .. (id or "unknown"))
  wezterm.log_info("🎯 Тип: " .. (type_info or "unknown"))
  
  session_status.start_loading(window)
  
  pending_operation = {
    type = "load",
    window = window,
    session_name = session_name
  }
  
  local type = string.match(id, "^([^/]+)")
  local clean_id = string.match(id, "([^/]+)$")
  clean_id = string.match(clean_id, "(.+)%..+$")
  
  wezterm.log_info("🎯 Обработанный тип: " .. (type or "unknown"))
  wezterm.log_info("🎯 Обработанный ID: " .. (clean_id or "unknown"))
  
  safe_clear_tabs(window)
  
  wezterm.time.call_after(1.0, function()
    wezterm.log_info("🎯 Выполняем восстановление...")
    
    local opts = {
      window = window:mux_window(),
      relative = false,
      restore_text = true,
      on_pane_restore = resurrect.tab_state.default_on_pane_restore,
    }
    
    local success = false
    
    if type == "workspace" then
      wezterm.log_info("🎯 Загружаем состояние workspace: " .. clean_id)
      local state = resurrect.state_manager.load_state(clean_id, "workspace")
      if state then
        wezterm.log_info("🎯 Состояние workspace загружено, восстанавливаем...")
        resurrect.workspace_state.restore_workspace(state, opts)
        success = true
      else
        wezterm.log_info("❌ Не удалось загрузить состояние workspace")
      end
    elseif type == "window" then
      wezterm.log_info("🎯 Загружаем состояние window: " .. clean_id)
      local state = resurrect.state_manager.load_state(clean_id, "window")
      if state then
        wezterm.log_info("🎯 Состояние window загружено, восстанавливаем...")
        resurrect.window_state.restore_window(pane:window(), state, opts)
        success = true
      else
        wezterm.log_info("❌ Не удалось загрузить состояние window")
      end
    elseif type == "tab" then
      wezterm.log_info("🎯 Загружаем состояние tab: " .. clean_id)
      local state = resurrect.state_manager.load_state(clean_id, "tab")
      if state then
        wezterm.log_info("🎯 Состояние tab загружено, восстанавливаем...")
        resurrect.tab_state.restore_tab(pane:tab(), state, opts)
        success = true
      else
        wezterm.log_info("❌ Не удалось загрузить состояние tab")
      end
    else
      wezterm.log_info("❌ Неизвестный тип состояния: " .. (type or "nil"))
    end
    
    if not success then
      session_status.load_session_error(window, "Не удалось загрузить состояние")
      pending_operation = nil
      current_operation = nil
      selected_session_name = nil
    else
      wezterm.log_info("🎯 Восстановление инициировано успешно")
      session_status.load_session_success(window, session_name or "сессия")
    end
  end)
end

-- ========================== ОБРАБОТЧИКИ СОБЫТИЙ ==========================

  -- Обработка отмены workspace switcher
  wezterm.on("smart_workspace_switcher.workspace_switcher.canceled", function(window)
    wezterm.log_info("❌ Workspace switcher отменен")
    session_status.clear_saved_mode()
  end)
local function register_event_handlers()
  -- Обработка ошибок
  wezterm.on('resurrect.error', function(error)
    wezterm.log_info("Событие resurrect.error: " .. tostring(error))
    
    local window = nil
    if wezterm.mux and wezterm.mux.get_active_window then
      window = wezterm.mux.get_active_window()
    end
    
    if window then
      if current_operation == "save" then
        session_status.save_session_error(window, tostring(error))
        current_operation = nil
        is_user_save = false
        current_save_name = ""
        if save_timeout_timer then
          save_timeout_timer:cancel()
          save_timeout_timer = nil
        end
      else
        session_status.load_session_error(window, tostring(error))
      end
    end
  end)

  -- Установка флага при начале периодического сохранения
  wezterm.on('resurrect.state_manager.periodic_save.start', function()
    is_periodic_save = true
    wezterm.log_info("🎯 Начало периодического сохранения")
  end)

  -- Обработчик завершения сохранения состояния
  wezterm.on('resurrect.state_manager.save_state.finished', function(session_path)
    wezterm.log_info("🎯 Событие save_state.finished: " .. session_path .. " (periodic: " .. tostring(is_periodic_save) .. ", user: " .. tostring(is_user_save) .. ")")
    
    if save_timeout_timer then
      save_timeout_timer:cancel()
      save_timeout_timer = nil
    end
    
    if not is_periodic_save and is_user_save then
      local path = session_path:match(".+/([^/]+)$")
      local name = path and path:match("^(.+)%.json$") or current_save_name or "неизвестно"
      
      local window = nil
      if wezterm.mux and wezterm.mux.get_active_window then
        window = wezterm.mux.get_active_window()
      end
      
      if window then
        wezterm.log_info("🎯 Вызываем save_session_success с именем: " .. name)
        session_status.save_session_success(window, name)
        
        if pending_restore then
          wezterm.log_info("🎯 Выполняем отложенное восстановление после сохранения")
          wezterm.time.call_after(2, function()
            perform_restore(pending_restore.window, pending_restore.pane, pending_restore.id, pending_restore.session_name, pending_restore.type_info)
            pending_restore = nil
          end)
        end
      end
      
      is_user_save = false
      current_save_name = ""
      current_operation = nil
    elseif is_periodic_save then
      is_periodic_save = false
      wezterm.log_info("🎯 Периодическое сохранение завершено")
    end
  end)

  -- Обработчик начала сохранения состояния
  wezterm.on('resurrect.state_manager.save_state.start', function(state, opt_name)
    wezterm.log_info("🎯 Событие save_state.start с именем: " .. (opt_name or "неизвестно") .. " (periodic: " .. tostring(is_periodic_save) .. ", user: " .. tostring(is_user_save) .. ")")
    
    if not is_periodic_save and is_user_save then
      wezterm.log_info("🎯 Начато пользовательское сохранение")
      current_operation = "save"
      
      save_timeout_timer = wezterm.time.call_after(1, function()
        wezterm.log_info("🎯 Таймаут сохранения - очищаем иконку")
        local window = nil
        if wezterm.mux and wezterm.mux.get_active_window then
          window = wezterm.mux.get_active_window()
        end
        
        if window and is_user_save then
          session_status.save_session_error(window, "Ошибка плагина resurrect")
          is_user_save = false
          current_save_name = ""
          current_operation = nil
          
          if pending_restore then
            wezterm.log_info("🎯 Выполняем отложенное восстановление после таймаута")
            wezterm.time.call_after(2, function()
              perform_restore(pending_restore.window, pending_restore.pane, pending_restore.id, pending_restore.session_name, pending_restore.type_info)
              pending_restore = nil
            end)
          end
        end
        save_timeout_timer = nil
      end)
    end
  end)

  -- Остальные обработчики...
  wezterm.on('resurrect.state_manager.load_state.finished', function(name, type)
    wezterm.log_info("🎯 Событие load_state.finished: " .. name .. ", тип: " .. type)
    
    if pending_operation and pending_operation.type == "load" then
      local window = pending_operation.window
      local session_name = pending_operation.session_name or name
      
      wezterm.log_info("🎯 Обрабатываем ожидающую операцию загрузки: " .. session_name)
      session_status.load_session_success(window, session_name)
      
      pending_operation = nil
      current_operation = nil
      selected_session_name = nil
    end
  end)

  wezterm.on('resurrect.state_manager.delete_state.finished', function(id)
    wezterm.log_info("🎯 Событие delete_state.finished: " .. id)
    
    if pending_operation and pending_operation.type == "delete" then
      local window = pending_operation.window
      local session_name = pending_operation.session_name
      
      if not session_name then
        local path = id:match(".+/([^/]+)$")
        session_name = path and path:match("^(.+)%.json$") or id
      end
      
      wezterm.log_info("🎯 Обрабатываем ожидающую операцию удаления: " .. session_name)
      session_status.delete_session_success(window, session_name)
      
      pending_operation = nil
      current_operation = nil
      selected_session_name = nil
    end
  end)

  wezterm.on('resurrect.fuzzy_loader.fuzzy_load.start', function(window, pane)
    wezterm.log_info("Событие fuzzy_load.start")
  end)
  
  wezterm.on('resurrect.fuzzy_loader.fuzzy_load.finished', function(window, pane)
    wezterm.log_info("Событие fuzzy_load.finished")
    
    if list_shown_timer then
      list_shown_timer:cancel()
      list_shown_timer = nil
    end
    
    wezterm.time.call_after(0.3, function()
      if current_operation and not pending_operation then
        wezterm.log_info("Обнаружена отмена операции: " .. current_operation)
        if current_operation == "load" then
          session_status.load_session_cancelled(window)
        elseif current_operation == "delete" then
          session_status.delete_session_cancelled(window)
        end
        current_operation = nil
        selected_session_name = nil
      end
    end)
  end)

  -- Сохранение состояния
  wezterm.on('resurrect.save_state', function(window, pane)
    wezterm.log_info("Обработчик события resurrect.save_state")
    
    window:perform_action(
      wezterm.action.PromptInputLine({
        description = "Введите имя для сохранения сессии",
        action = wezterm.action_callback(function(inner_win, inner_pane, line)
          if line and line ~= "" then
            is_user_save = true
            current_save_name = line
            current_operation = "save"
            
            wezterm.log_info("🎯 Начинаем сохранение с именем: " .. line)
            session_status.start_loading(window)
            
            -- ПРИНУДИТЕЛЬНЫЙ ТАЙМЕР НА 2 СЕКУНДЫ для ошибок плагина
            save_timeout_timer = wezterm.time.call_after(1, function()
              wezterm.log_info("🔥 ПРИНУДИТЕЛЬНЫЙ ТАЙМЕР: очищаем иконку из-за ошибки плагина")
              if window then
                session_status.save_session_error(window, "Ошибка плагина или интерактивное приложение")
              end
              is_user_save = false
              current_save_name = ""
              current_operation = nil
              save_timeout_timer = nil
            end)
            
            wezterm.time.call_after(0.1, function()
              local state = resurrect.workspace_state.get_workspace_state()
              if state then
                wezterm.log_info("🎯 Состояние получено, сохраняем...")
                resurrect.state_manager.save_state(state, line)
              else
                wezterm.log_info("❌ Не удалось получить состояние workspace")
                -- Отменяем таймер и сразу очищаем иконку
                if save_timeout_timer then
                  save_timeout_timer:cancel()
                  save_timeout_timer = nil
                end
                session_status.save_session_error(window, "Не удалось получить состояние")
                is_user_save = false
                current_save_name = ""
                current_operation = nil
              end
            end)
          else
            wezterm.log_info("🎯 Сохранение отменено пользователем")
            session_status.clear_saved_mode()
          end
        end),
      }),
      pane
    )
  end)

  -- Загрузка и удаление состояния (сокращенные версии)
  wezterm.on('resurrect.load_state', function(window, pane)
    wezterm.log_info("Обработчик события resurrect.load_state")
    current_operation = "load"
    selected_session_name = nil
    pending_operation = nil
    session_status.load_session_start(window)
    
    resurrect.fuzzy_loader.fuzzy_load(
      window, 
      pane, 
      function(id, label)
        current_operation = nil
        
        local type = string.match(id, "^([^/]+)")
        local type_display = "неизвестно"
        if type == "workspace" then
          type_display = "рабочая область"
        elseif type == "window" then
          type_display = "окно"
        elseif type == "tab" then
          type_display = "вкладка"
        end
        
        if label and label ~= "" then
          selected_session_name = label
        else
          local clean_id = string.match(id, "([^/]+)$")
          selected_session_name = clean_id and string.match(clean_id, "(.+)%..+$") or clean_id
        end
        
        perform_restore(window, pane, id, selected_session_name, type_display)
      end,
      {
        title = "Загрузка сессии",
        description = "Выберите сессию для загрузки и нажмите Enter = загрузить, Esc = отмена, / = фильтр",
        fuzzy_description = "Поиск сессии для загрузки: ",
        is_fuzzy = true,
      }
    )
  end)

  wezterm.on('resurrect.delete_state', function(window, pane)
    wezterm.log_info("Обработчик события resurrect.delete_state")
    
    current_operation = "delete"
    selected_session_name = nil
    pending_operation = nil
    session_status.delete_session_start(window)
    
    resurrect.fuzzy_loader.fuzzy_load(
      window, 
      pane, 
      function(id)
        current_operation = nil
        
        local clean_id = string.match(id, "([^/]+)$")
        selected_session_name = clean_id and string.match(clean_id, "(.+)%..+$") or clean_id
        
        pending_operation = {
          type = "delete",
          window = window,
          session_name = selected_session_name
        }
        
        resurrect.state_manager.delete_state(id)
        
        wezterm.time.call_after(1, function()
          session_status.delete_session_success(window, selected_session_name or "сессия")
          pending_operation = nil
          current_operation = nil
          selected_session_name = nil
        end)
      end,
      {
        title = "Удаление сессии",
        description = "Выберите сессию для удаления и нажмите Enter = удалить, Esc = отмена, / = фильтр",
        fuzzy_description = "Поиск сессии для удаления: ",
        is_fuzzy = true,
      }
    )
  end)
end

-- Инициализация
  -- Обработка отмены workspace switcher
  wezterm.on("smart_workspace_switcher.workspace_switcher.canceled", function(window)
    wezterm.log_info("❌ Workspace switcher отменен")
    session_status.clear_saved_mode()
  end)
register_event_handlers()

return M
