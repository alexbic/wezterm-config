-- cat > ~/.config/wezterm/config/dialogs/locale-manager.lua << 'EOF'
--
-- –û–ü–ò–°–ê–ù–ò–ï: UI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π WezTerm
-- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—è–º–∏.
-- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
--
-- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò: utils.environment, config.environment.globals

local wezterm = require('wezterm')
local env_utils = require('utils.environment')
local globals = require('config.environment.globals')

local M = {}

-- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
local function get_language_status()
  local create_platform_info = require('utils.platform')
  local platform = create_platform_info(wezterm.target_triple)
  
  local available_languages = env_utils.scan_locale_files(wezterm.config_dir, platform)
  local stats = env_utils.get_locale_stats(available_languages)
  
  local result = {
    available = {},
    missing = {},
    current = os.getenv("WEZTERM_LANG") or globals.DEFAULT_LANGUAGE
  }
  
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫
  for _, lang_code in ipairs(globals.SUPPORTED_LANGUAGES) do
    if available_languages[lang_code] then
      table.insert(result.available, {
        code = lang_code,
        name = available_languages[lang_code].name,
        locale = available_languages[lang_code].locale,
        keys = stats.languages[lang_code] and stats.languages[lang_code].keys or 0
      })
    else
      table.insert(result.missing, {
        code = lang_code,
        name = "Unknown Language",
        status = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
      })
    end
  end
  
  return result
end

-- –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–æ–≤ –¥–ª—è InputSelector
local function create_choices(language_status)
  local choices = {}
  
  -- –ó–∞–≥–æ–ª–æ–≤–æ–∫
  table.insert(choices, {
    id = "header",
    label = "üåç –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ï–ô"
  })
  
  table.insert(choices, {
    id = "separator1", 
    label = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  })
  
  -- –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
  table.insert(choices, {
    id = "current",
    label = "üìç –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: " .. language_status.current
  })
  
  table.insert(choices, {
    id = "separator2", 
    label = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  })
  
  -- –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
  if #language_status.available > 0 then
    table.insert(choices, {
      id = "available_header",
      label = "‚úÖ –î–û–°–¢–£–ü–ù–´–ï –Ø–ó–´–ö–ò:"
    })
    
    for _, lang in ipairs(language_status.available) do
      local status_icon = (lang.code == language_status.current) and "üü¢" or "‚ö™"
      local label = string.format("%s %s (%s) - %d –∫–ª—é—á–µ–π", 
        status_icon, lang.name, lang.code, lang.keys)
      
      table.insert(choices, {
        id = "switch_" .. lang.code,
        label = label
      })
    end
  end
  
  -- –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
  if #language_status.missing > 0 then
    table.insert(choices, {
      id = "separator3", 
      label = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    })
    
    table.insert(choices, {
      id = "missing_header",
      label = "‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï –Ø–ó–´–ö–ò:"
    })
    
    for _, lang in ipairs(language_status.missing) do
      table.insert(choices, {
        id = "create_" .. lang.code,
        label = "üìù –°–æ–∑–¥–∞—Ç—å " .. lang.code .. " –ª–æ–∫–∞–ª—å"
      })
    end
  end
  
  -- –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
  table.insert(choices, {
    id = "separator4", 
    label = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  })
  
  table.insert(choices, {
    id = "regenerate",
    label = "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞"
  })
  
  table.insert(choices, {
    id = "stats",
    label = "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"
  })
  
  table.insert(choices, {
    id = "exit",
    label = "üö™ –í—ã—Ö–æ–¥"
  })
  
  return choices
end

-- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
local function handle_choice(window, pane, choice_id, language_status)
  if not choice_id or choice_id == "exit" or choice_id:match("separator") or choice_id:match("_header") or choice_id == "header" or choice_id == "current" then
    return
  end
  
  local create_platform_info = require('utils.platform')
  local platform = create_platform_info(wezterm.target_triple)
  
  if choice_id:match("^switch_") then
    -- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
    local lang_code = choice_id:match("^switch_(.+)$")
    if lang_code and lang_code ~= language_status.current then
      local success = env_utils.switch_language_and_rebuild(wezterm.config_dir, platform, lang_code)
      if success then
        window:toast_notification("–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è", "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: " .. lang_code, nil, 3000)
        -- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        wezterm.reload_configuration()
      else
        window:toast_notification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫", nil, 3000)
      end
    end
    
  elseif choice_id:match("^create_") then
    -- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
    local lang_code = choice_id:match("^create_(.+)$")
    window:toast_notification("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏ " .. lang_code .. " –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", nil, 3000)
    
  elseif choice_id == "regenerate" then
    -- –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—ç—à–∞
    local success = env_utils.rebuild_locale_cache_file(wezterm.config_dir, platform, language_status.current)
    if success then
      window:toast_notification("–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è", "–ö—ç—à –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è: " .. language_status.current, nil, 3000)
      -- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      wezterm.reload_configuration()
    else
      window:toast_notification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à", nil, 3000)
    end
    
  elseif choice_id == "stats" then
    -- –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    local available_languages = env_utils.scan_locale_files(wezterm.config_dir, platform)
    local stats = env_utils.get_locale_stats(available_languages)
    local stats_text = string.format("–í—Å–µ–≥–æ —è–∑—ã–∫–æ–≤: %d, –ú–∞–∫—Å–∏–º—É–º –∫–ª—é—á–µ–π: %d", 
      stats.total_languages, stats.total_keys)
    window:toast_notification("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏", stats_text, nil, 5000)
  end
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
M.show_locale_manager = function(window, pane)
  local language_status = get_language_status()
  local choices = create_choices(language_status)
  
  window:perform_action(
    wezterm.action.InputSelector({
      action = wezterm.action_callback(function(inner_window, inner_pane, id, label)
        handle_choice(inner_window, inner_pane, id, language_status)
      end),
      title = "üåç –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ WezTerm",
      description = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞–º–∏",
      fuzzy = false,
      alphabet = "",
      choices = choices,
    }),
    pane
  )
end

return M
