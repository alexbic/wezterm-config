--
-- –û–ü–ò–°–ê–ù–ò–ï: UI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å fallback –∑–∞—â–∏—Ç–æ–π
--
local wezterm = require('wezterm')
local environment = require("config.environment")
local env_utils = require('utils.environment')
local globals = require('config.environment.globals')
local dialog = require('utils.dialog')

local M = {}

-- FALLBACK —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–ª–æ–º–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
local FALLBACK_TEXTS = {
  locale_manager_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π",
  locale_manager_wezterm_title = "–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ WezTerm", 
  locale_manager_description = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞–º–∏",
  locale_current_language = "–¢–µ–∫—É—â–∏–π —è–∑—ã–∫",
  locale_create_new = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞–ª—å",
  locale_regenerate_cache = "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞",
  locale_show_stats = "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏",
  exit = "–í—ã—Ö–æ–¥"
}

-- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å fallback
local function safe_get_text(key, ...)
  local text = (environment.locale and environment.locale.t and environment.locale.t[key]) or FALLBACK_TEXTS[key] or key
  if ... then
    return string.format(text, ...)
  else
    return text
  end
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
M.show_locale_manager = function(window, pane)
  local create_platform_info = require('utils.platform')
  local platform = create_platform_info(wezterm.target_triple)
  
  -- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —è–∑—ã–∫–∞—Ö
  local available_languages = env_utils.scan_locale_files(wezterm.config_dir, platform)
  local stats = env_utils.get_locale_stats(available_languages)
  local current_language = (environment.locale and environment.locale.current_language) or "ru"
  
  -- –°–æ–∑–¥–∞–µ–º choices —Å fallback –∑–∞—â–∏—Ç–æ–π
  local choices = {}
  
  -- –ó–∞–≥–æ–ª–æ–≤–æ–∫
  table.insert(choices, dialog.create_choice({
    id = "header",
    icon = environment.icons.t."system",
    text = safe_get_text("locale_manager_title"),
    colored = true,
    color = "#BD93F9"
  }))
  
  -- –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
  table.insert(choices, dialog.create_choice({
    id = "current", 
    icon = environment.icons.t."locale_current",
    text = safe_get_text("locale_current_language", current_language)
  }))
  
  -- –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  table.insert(choices, dialog.create_choice({
    id = "emergency_fix",
    icon = environment.icons.t."locale_emergency",
    text = "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ru.lua"
  }))
  
  -- –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
  for _, lang_code in ipairs(globals.SUPPORTED_LANGUAGES) do
    if available_languages[lang_code] then
      local lang_data = available_languages[lang_code]
      local key_count = stats.languages[lang_code] and stats.languages[lang_code].keys or 0
      local status_icon = (lang_code == current_language) and "üü¢" or "‚ö™"
      
      table.insert(choices, dialog.create_choice({
        id = "switch_" .. lang_code,
        icon = status_icon,
        text = string.format("%s (%s) - %d –∫–ª—é—á–µ–π", lang_data.name, lang_code, key_count)
      }))
    else
      table.insert(choices, dialog.create_choice({
        id = "create_" .. lang_code,
        icon = environment.icons.t."locale_create", 
        text = safe_get_text("locale_create_new", lang_code)
      }))
    end
  end
  
  -- –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
  table.insert(choices, dialog.create_choice({
    id = "regenerate",
    icon = environment.icons.t."locale_refresh",
    text = safe_get_text("locale_regenerate_cache")
  }))
  
  table.insert(choices, dialog.create_choice({
    id = "exit",
    icon = environment.icons.t."exit", 
    text = safe_get_text("exit")
  }))
  
  -- –°–æ–∑–¥–∞–µ–º InputSelector
  local selector_config = dialog.create_input_selector({
    title = safe_get_text("locale_manager_wezterm_title"),
    description = safe_get_text("locale_manager_description"),
    choices = choices,
    action = wezterm.action_callback(function(inner_window, inner_pane, id, label)
      if not id or id == "exit" or id == "header" or id == "current" then
        return
      end
      
      if id == "emergency_fix" then
        -- –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï
        local success = env_utils.rebuild_locale_cache_file(wezterm.config_dir, platform, "ru")
        if success then
          inner_window:toast_notification("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", nil, 3000)
          wezterm.reload_configuration()
        end
        
      elseif id:match("^switch_") then
        -- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º
        local lang_code = id:match("^switch_(.+)$")
        if lang_code and lang_code ~= current_language then
          -- –ü–ï–†–ï–°–û–ó–î–ê–ï–ú –ª–æ–∫–∞–ª—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
          if lang_code ~= "ru" then
            local script_path = wezterm.config_dir .. "/scripts/create-locale.sh"
            local ru_path = wezterm.config_dir .. "/config/locales/ru.lua"
            local cmd = script_path .. " " .. ru_path .. " " .. lang_code
            os.execute(cmd)
          end
          
          local success = env_utils.switch_language_and_rebuild(wezterm.config_dir, platform, lang_code)
          if success then
            inner_window:toast_notification("–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è", "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: " .. lang_code, nil, 3000)
            wezterm.reload_configuration()
          end
        end
        
      elseif id:match("^create_") then
        -- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞  
        local lang_code = id:match("^create_(.+)$")
        local script_path = wezterm.config_dir .. "/scripts/create-locale.sh"
        local ru_path = wezterm.config_dir .. "/config/locales/ru.lua"
        local cmd = script_path .. " " .. ru_path .. " " .. lang_code
        local handle = io.popen(cmd .. " 2>&1")
        if handle then
          local result = handle:read("*a")
          local success = handle:close()
          if success then
            inner_window:toast_notification("–£—Å–ø–µ—Ö", "–õ–æ–∫–∞–ª—å —Å–æ–∑–¥–∞–Ω–∞", nil, 3000)
            env_utils.switch_language_and_rebuild(wezterm.config_dir, platform, lang_code)
            wezterm.reload_configuration()
          end
        end
        
      elseif id == "regenerate" then
        -- –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—ç—à–∞
        local success = env_utils.rebuild_locale_cache_file(wezterm.config_dir, platform, current_language)
        if success then
          inner_window:toast_notification("–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è", "–ö—ç—à –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", nil, 3000)
          wezterm.reload_configuration()
        end
      end
    end)
  })
  
  window:perform_action(wezterm.action.InputSelector(selector_config), pane)
end

return M
