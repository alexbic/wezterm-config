#!/bin/bash

###############################################################################
# –°–∫—Ä–∏–ø—Ç create-locale.sh
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ .lua –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
# –∏–∑ –¥—Ä—É–≥–æ–≥–æ lua-—Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è CLI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ `trans`.
#
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º: macOS, Linux, Windows (—á–µ—Ä–µ–∑ Git Bash)
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
#   $1 ‚Äî –ø—É—Ç—å –¥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ lua-—Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, en.lua)
#   $2 ‚Äî —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, fr, de, es)
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./scripts/create-locale.sh ./locales/en.lua fr
###############################################################################

# ========== 1. –ü–ê–†–ê–ú–ï–¢–†–´ –í–•–û–î–ê ==========
SOURCE_FILE="$1"     # –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É lua-—Ñ–∞–π–ª—É (en.lua)
TARGET_LANG="$2"     # –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [ -z "$SOURCE_FILE" ] || [ -z "$TARGET_LANG" ]; then
    echo "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <source_file.lua> <target_lang_code>"
    exit 1
fi

# ========== 2. –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ü–õ–ê–¢–§–û–†–ú–´ ==========
detect_platform() {
    # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É (macOS, Linux, Windows)
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}
PLATFORM=$(detect_platform)

# ========== 3. –ê–î–ê–ü–¢–ê–¶–ò–Ø sed –∏ mktemp –î–õ–Ø –†–ê–ó–ù–´–• –û–° ==========
cross_platform_sed() {
    # –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–º–µ–Ω—É —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª–µ (in-place), —Å —É—á—ë—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π macOS
    local pattern="$1"
    local file="$2"
    if [ "$PLATFORM" = "macos" ]; then
        sed -i '' "$pattern" "$file"
    else
        sed -i "$pattern" "$file"
    fi
}

cross_platform_mktemp() {
    # –°–æ–∑–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –û–°
    if [ "$PLATFORM" = "windows" ]; then
        mktemp -d -t wezterm_locale_XXXXXX
    else
        mktemp -d
    fi
}

# ========== 4. –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú ==========
SCRIPT_DIR=$(dirname "$0")                    # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
CONFIG_DIR=$(dirname "$SCRIPT_DIR")           # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
LOCALE_CACHE="$CONFIG_DIR/config/environment/locale.lua"  # –§–∞–π–ª –∫–µ—à–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏

# ========== 5. –§–£–ù–ö–¶–ò–Ø –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò –°–û–û–ë–©–ï–ù–ò–ô ==========
get_localized_message() {
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É, —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞—è—Å—å –Ω–∞–π—Ç–∏ –≤ locale.lua
    local key="$1"
    shift
    local args=("$@")
    if [ -f "$LOCALE_CACHE" ]; then
        local message=$(grep "^  $key = " "$LOCALE_CACHE" | sed 's/.*= "\(.*\)",$/\1/')
        if [ -n "$message" ]; then
            printf "$message" "${args[@]}"
            return
        fi
    fi

    # –ó–∞–ø–∞—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ—Ç locale.lua)
    case "$key" in
        "locale_creation_start") printf "üåê Creating %s locale from %s" "${args[@]}" ;;
        "locale_keys_found") printf "üéØ Found: %d elements for translation" "${args[@]}" ;;
        "locale_translation_progress") printf "üåê Translating %s.lua from %s.lua %s [%d/%d keys]" "${args[@]}" ;;
        "locale_translation_complete") printf "‚úÖ Translation completed" ;;
        "locale_translation_error") printf "‚ùå Translation error" ;;
        "locale_syntax_check") printf "‚úÖ %s localization created: %s" "${args[@]}" ;;
        "locale_syntax_error") printf "‚ùå Syntax error in %s" "${args[@]}" ;;
        "locale_template_not_found") printf "‚ùå Template not found: %s" "${args[@]}" ;;
        "locale_no_strings") printf "‚ùå No strings for translation" ;;
        *) printf "%s" "$key" ;;
    esac
}

# ========== 6. –í–ò–ó–£–ê–õ–¨–ù–´–ô –ü–†–û–ì–†–ï–°–°-–ë–ê–† ==========
show_progress() {
    local current="$1"
    local total="$2"
    local source_lang="$3"
    local target_lang="$4"
    local percent=$((current * 100 / total))
    local filled=$((percent * 20 / 100))
    local empty=$((20 - filled))
    local bar=""
    for ((i=1; i<=filled; i++)); do bar+="‚ñà"; done
    for ((i=1; i<=empty; i++)); do bar+="‚ñë"; done
    printf "\r"
    get_localized_message "locale_translation_progress" \
        "$target_lang" "$source_lang" "$bar" "$current" "$total"
}

# ========== 7. –í–´–ß–ò–°–õ–ï–ù–ò–ï –Ø–ó–´–ö–ê –ò–ú–ü–û–†–¢–ê ==========
SOURCE_LANG=$(grep -m1 'locale' "$SOURCE_FILE" \
    | sed -n 's/.*"\([a-z][a-z]\)_.*/\1/p')
if [ -z "$SOURCE_LANG" ]; then
    BASENAME=$(basename "$SOURCE_FILE" .lua)
    SOURCE_LANG="${BASENAME:0:2}"
fi

# ========== 8. –ö–ê–†–¢–ê –ö–û–î–û–í –Ø–ó–´–ö–û–í ==========
case "$TARGET_LANG" in
    "en") TARGET_LOCALE="en_US.UTF-8"; TARGET_NAME="English" ;;
    "de") TARGET_LOCALE="de_DE.UTF-8"; TARGET_NAME="German" ;;
    "fr") TARGET_LOCALE="fr_FR.UTF-8"; TARGET_NAME="French" ;;
    "es") TARGET_LOCALE="es_ES.UTF-8"; TARGET_NAME="Spanish" ;;
    *) TARGET_LOCALE="${TARGET_LANG}_${TARGET_LANG^^}.UTF-8"; TARGET_NAME="Unknown" ;;
esac

SOURCE_DIR=$(dirname "$SOURCE_FILE")
NEW_FILE="$SOURCE_DIR/${TARGET_LANG}.lua"
TEMPLATE="$SOURCE_DIR/template.lua"
TEMP_DIR=$(cross_platform_mktemp)
trap "rm -rf $TEMP_DIR" EXIT

echo

# ========== 9. –ò–ó–í–õ–ï–ö–ê–ï–ú –í–°–ï –ü–ï–†–ï–í–û–î–ò–ú–´–ï –°–¢–†–û–ö–ò ==========
grep -E '^  [a-zA-Z_]+ = ".*",' "$SOURCE_FILE" \
    | grep -v '^  locale = ' \
    | grep -v '^  name = ' > "$TEMP_DIR/string_lines.txt"

TOTAL_KEYS=$(wc -l < "$TEMP_DIR/string_lines.txt")
echo

# ========== 10. –ü–ï–†–ï–í–û–î –ö–õ–Æ–ß–ï–ô ==========
if [ "$TOTAL_KEYS" -gt 0 ]; then
    TRANSLATED_LINES=()
    CURRENT_KEY=0
    TRANSLATION_SUCCESS=true

    while IFS= read -r line; do
        ((CURRENT_KEY++))
        show_progress "$CURRENT_KEY" "$TOTAL_KEYS" "$SOURCE_LANG" "$TARGET_LANG"

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
        key=$(echo "$line" | awk -F ' = "' '{print $1}' | sed 's/^  //')
        value=$(echo "$line" | awk -F ' = "' '{print $2}' | sed 's/",$//')

        # –ü–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é trans
        if translated_text=$(trans -brief "$SOURCE_LANG:$TARGET_LANG" "$value" 2>/dev/null); then
            cleaned_text=$(echo "$translated_text" | tr -d '"' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            TRANSLATED_LINES+=("  $key = \"$cleaned_text\",")
        else
            TRANSLATED_LINES+=("  $key = \"$value\",")
            TRANSLATION_SUCCESS=false
        fi

        sleep 0.1
    done < "$TEMP_DIR/string_lines.txt"

    echo

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
    if $TRANSLATION_SUCCESS; then
        get_localized_message "locale_translation_complete"
    else
        get_localized_message "locale_translation_error"
    fi
    echo

    # ========== 11. –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–ê –ü–ï–†–ï–í–û–î–ê ==========
    printf '%s\n' "${TRANSLATED_LINES[@]}" > "$TEMP_DIR/content.txt"

    if [ -f "$TEMPLATE" ]; then
        cp "$TEMPLATE" "$TEMP_DIR/output.lua"
        cross_platform_sed "s/{{LANGUAGE_NAME}}/$TARGET_NAME/g" "$TEMP_DIR/output.lua"
        cross_platform_sed "s/{{LOCALE_CODE}}/$TARGET_LOCALE/g" "$TEMP_DIR/output.lua"
        cross_platform_sed "/{{TRANSLATED_KEYS}}/r $TEMP_DIR/content.txt" "$TEMP_DIR/output.lua"
        cross_platform_sed "/{{TRANSLATED_KEYS}}/d" "$TEMP_DIR/output.lua"

        if $TRANSLATION_SUCCESS; then
            cross_platform_sed "/name = \"$TARGET_NAME\",/a\\
  translation_completed = true," "$TEMP_DIR/output.lua"
        else
            cross_platform_sed "/name = \"$TARGET_NAME\",/a\\
  translation_completed = false," "$TEMP_DIR/output.lua"
        fi

        cp "$TEMP_DIR/output.lua" "$NEW_FILE"

        # ========== 12. –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê LUA ==========
        if luac -p "$NEW_FILE" 2>/dev/null; then
            get_localized_message "locale_syntax_check" "$TARGET_NAME" "$NEW_FILE"
            echo
        else
            get_localized_message "locale_syntax_error" "$NEW_FILE"
            echo
            exit 1
        fi
    else
        get_localized_message "locale_template_not_found" "$TEMPLATE"
        echo
        exit 1
    fi
else
    get_localized_message "locale_no_strings"
    echo
    exit 1
fi
