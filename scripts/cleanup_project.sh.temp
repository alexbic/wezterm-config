#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ (–±–æ–ª–µ–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ)
RED='\033[0;91m'         # –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
GREEN='\033[0;92m'       # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
YELLOW='\033[0;93m'      # –Ø—Ä–∫–æ-–∂–µ–ª—Ç—ã–π
BLUE='\033[0;94m'        # –Ø—Ä–∫–æ-—Å–∏–Ω–∏–π
PURPLE='\033[0;95m'      # –Ø—Ä–∫–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
CYAN='\033[0;96m'        # –Ø—Ä–∫–æ-—Ü–∏–∞–Ω
ORANGE='\033[0;33m'      # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Ñ–∞–π–ª–æ–≤
NC='\033[0m'             # No Color

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
detect_platform() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}

PLATFORM=$(detect_platform)

echo -e "${BLUE}üßπ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ WezTerm (${PLATFORM})${NC}"
echo ""

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ
if [ "$PLATFORM" = "windows" ]; then
    PROJECT_DIR="$USERPROFILE/.config/wezterm"
else
    PROJECT_DIR="$HOME/.config/wezterm"
fi

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -d "$PROJECT_DIR" ]; then
    echo -e "${RED}‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $PROJECT_DIR${NC}"
    exit 1
fi

cd "$PROJECT_DIR" || exit 1

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ)
PATTERNS=(
    "*.backup*"
    "*.bak"
    "*.backup[0-9]*"
    "*.prebackup"
    "test_*.lua"
    "test_*.sh" 
    "test-*.lua"
    "test-*.sh"
    "*test*.lua"
    "*test*.sh"
    ".!*!*.lua"
    "*.!*"
    "temp_*.lua"
    "tmp_*.lua"
    "*.tmp"
    "*.log"
    "*debug*.tmp"
    "rollback_*.sh"
    "*_old.*"
    "*_deprecated.*"
    "*log_info*"
    "Thumbs.db"
    "desktop.ini"
    "*~"
    ".*.swp"
    ".*.swo"
)

# –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è find
cross_platform_find() {
    local pattern="$1"
    
    if [ "$PLATFORM" = "windows" ]; then
        powershell.exe -Command "Get-ChildItem -Path '.' -Filter '$pattern' -Recurse -File | ForEach-Object { \$_.FullName.Replace((Get-Location).Path + '\\', '.\\').Replace('\\', '/') }"
    else
        find . -name "$pattern" -type f 2>/dev/null
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
find_files_to_delete() {
    echo -e "${CYAN}üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º...${NC}" >&2
    
    local all_files=()
    for pattern in "${PATTERNS[@]}"; do
        while IFS= read -r file; do
            if [[ -f "$file" && "$file" != "./cleanup_project.sh" ]]; then
                all_files+=("$file")
            fi
        done < <(cross_platform_find "$pattern")
    done
    
    # –í—ã–≤–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if [ ${#all_files[@]} -gt 0 ]; then
        printf '%s\n' "${all_files[@]}" | sort -u | grep -v '^[[:space:]]*$'
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
show_files_to_delete() {
    local files=("$@")
    local count=${#files[@]}
    
    if [ $count -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –§–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: $count${NC}"
    echo ""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    local backups=()
    local tests=()
    local artifacts=()
    local temp=()
    local others=()
    
    for file in "${files[@]}"; do
        if [[ "$file" =~ \.(backup|bak) ]]; then
            backups+=("$file")
        elif [[ "$file" =~ test ]]; then
            tests+=("$file")
        elif [[ "$file" =~ \.!.*!|_old|_deprecated|log_info ]]; then
            artifacts+=("$file")
        elif [[ "$file" =~ temp_|tmp_|\.tmp|\.log ]]; then
            temp+=("$file")
        else
            others+=("$file")
        fi
    done
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    show_category "üìã –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏" "${backups[@]}"
    show_category "üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã" "${tests[@]}"
    show_category "üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã" "${artifacts[@]}"
    show_category "‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã" "${temp[@]}"
    show_category "üìÑ –ü—Ä–æ—á–∏–µ —Ñ–∞–π–ª—ã" "${others[@]}"
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤
show_category() {
    local title="$1"
    shift
    local files=("$@")
    
    if [ ${#files[@]} -gt 0 ]; then
        echo -e "${PURPLE}$title:${NC}"
        for file in "${files[@]}"; do
            echo -e "  ${ORANGE}üóëÔ∏è  $file${NC}"
        done
        echo ""
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_deletion() {
    echo -e "${YELLOW}‚ùì –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã? (y/N):${NC} \c"
    read -r response
    case "$response" in
        [yY][eE][sS]|[yY])
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å backup
safe_delete_files() {
    local files=("$@")
    
    if [ ${#files[@]} -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è${NC}"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    local backup_dir="./backup/cleanup-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$backup_dir"
    
    local deleted_count=0
    local backed_up_count=0
    local failed_count=0
    
    echo -e "${CYAN}üì¶ –°–æ–∑–¥–∞–Ω–∏–µ backup –≤: $backup_dir${NC}"
    
    for file in "${files[@]}"; do
        if [[ -f "$file" ]]; then
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ backup
            local backup_path="$backup_dir/$(dirname "$file")"
            mkdir -p "$backup_path"
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ backup
            if cp "$file" "$backup_dir/$file" 2>/dev/null; then
                ((backed_up_count++))
                
                # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                if rm "$file" 2>/dev/null; then
                    ((deleted_count++))
                    echo -e "  ${GREEN}‚úì${NC} $file"
                else
                    ((failed_count++))
                    echo -e "  ${RED}‚úó${NC} –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: $file"
                fi
            else
                ((failed_count++))
                echo -e "  ${RED}‚úó${NC} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup: $file"
            fi
        fi
    done
    
    echo ""
    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω backup: $backup_dir${NC}"
    echo -e "${GREEN}‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $deleted_count${NC}"
    
    if [ $failed_count -gt 0 ]; then
        echo -e "${RED}‚ö†Ô∏è  –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: $failed_count${NC}"
    fi
    
    if [ $backed_up_count -gt 0 ]; then
        echo -e "${CYAN}üí° –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: cp -r $backup_dir/* ./${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
    local files_to_delete=()
    while IFS= read -r line; do 
        if [[ -n "$line" ]]; then
            files_to_delete+=("$line")
        fi
    done < <(find_files_to_delete)
    
    # –ü–æ–∫–∞–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if show_files_to_delete "${files_to_delete[@]}"; then
        echo ""
        if confirm_deletion; then
            safe_delete_files "${files_to_delete[@]}"
        else
            echo -e "${CYAN}üìã –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º${NC}"
        fi
    fi
    
    echo ""
    echo -e "${GREEN}‚ú® –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
}

# –ó–∞–ø—É—Å–∫
main
