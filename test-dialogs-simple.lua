#!/usr/bin/env lua

-- –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–æ–≤ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ wezterm
print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–æ–≤...")

-- –ú–æ–∫–∞–µ–º wezterm.format –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
local mock_wezterm = {
  format = function(elements)
    local result = ""
    for _, element in ipairs(elements) do
      if element.Text then
        result = result .. element.Text
      end
    end
    return result
  end
}

-- –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à –º–æ–¥—É–ª—å –¥–∏–∞–ª–æ–≥–æ–≤
package.path = package.path .. ";./utils/?.lua;./config/?.lua;./config/environment/?.lua"

-- –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
local mock_environment = {
  locale = {
    t = function(key, ...)
      local translations = {
        save_workspace_tab_title = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é",
        current_workspace = "–¢–µ–∫—É—â–∞—è workspace: %s",
        save_window_tab_title = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–∫–Ω–æ",
        save_window_default = "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s",
        save_tab_tab_title = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∫–ª–∞–¥–∫—É",
        save_tab_default = "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s",
        loading_sessions_title = "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏",
        loading_sessions_description = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
        deleting_sessions_title = "–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏",
        deleting_sessions_description = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
      }
      local template = translations[key] or key
      if ... then
        return string.format(template, ...)
      else
        return template
      end
    end
  }
}

local mock_icons = {
  ICONS = {
    workspace = "Û±Ç¨",
    window = "",
    tab = "Û∞ì©"
  }
}

local mock_colors = {
  COLORS = {
    dialog_save_border = "#50FA7B",
    dialog_border = "#BD93F9",
    dialog_delete_border = "#FF5555",
    dialog_load_border = "#8BE9FD",
    dialog_content = "#F8F8F2",
    dialog_hint = "#FFB86C"
  }
}

local mock_env_utils = {
  get_icon = function(icons, category)
    return icons.ICONS[category] or "?"
  end,
  get_color = function(colors, category)
    return colors.COLORS[category] or "#FFFFFF"
  end
}

-- –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –¥–∏–∞–ª–æ–≥–æ–≤
local dialogs = require('utils.dialogs')

print("\n=== –¢–ï–°–¢ 1: –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è workspace ===")
local save_workspace_desc = dialogs.create_save_description(
  mock_wezterm,
  dialogs.DIALOG_TYPES.SAVE_WORKSPACE,
  "my-awesome-workspace",
  mock_environment,
  mock_icons,
  mock_colors,
  mock_env_utils
)

print("‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è workspace —Å–æ–∑–¥–∞–Ω")
print("–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:")
print(save_workspace_desc)

print("\n=== –¢–ï–°–¢ 2: –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è window ===")
local save_window_desc = dialogs.create_save_description(
  mock_wezterm,
  dialogs.DIALOG_TYPES.SAVE_WINDOW,
  "main_window_123",
  mock_environment,
  mock_icons,
  mock_colors,
  mock_env_utils
)

print("‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è window —Å–æ–∑–¥–∞–Ω")

print("\n=== –¢–ï–°–¢ 3: –î–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ ===")
local load_desc = dialogs.create_load_description(
  mock_wezterm,
  5,
  mock_environment,
  mock_icons,
  mock_colors,
  mock_env_utils
)

print("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–∑–¥–∞–Ω")

print("\n=== –¢–ï–°–¢ 4: –î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è ===")
local delete_desc = dialogs.create_delete_description(
  mock_wezterm,
  3,
  mock_environment,
  mock_icons,
  mock_colors,
  mock_env_utils
)

print("‚úÖ –î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω")

print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WezTerm")
