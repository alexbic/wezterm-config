-- cat > ~/.config/wezterm/wezterm.lua << 'EOF'
--
-- –û–ü–ò–°–ê–ù–ò–ï: –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WezTerm
-- –≠—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ WezTerm.
-- –û–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

local wezterm = require('wezterm')
local debug = require("utils.debug")
debug.load_debug_settings()local environment = require('config.environment')
local create_platform_info = require('utils.platform')
local platform = create_platform_info(wezterm.target_triple)

if platform.is_mac then
  debug.log(wezterm, environment.locale.t, "global", "platform", "macOS")
elseif platform.is_win then
  debug.log(wezterm, environment.locale.t, "global", "platform_info", "Windows")
elseif platform.is_linux then
  debug.log(wezterm, environment.locale.t, "global", "platform_info", "Linux")
else
  debug.log(wezterm, environment.locale.t, "global", "platform_info", "Unknown")
end

---@class Config
---@field options table
local ConfigClass = {}

function ConfigClass:init()
   local o = {}
   self = setmetatable(o, { __index = ConfigClass })
   self.options = {}
   return o
end

function ConfigClass:append(new_options)
   for k, v in pairs(new_options) do
      if self.options[k] ~= nil then
         wezterm.log_warn(
            'Duplicate config option detected: ',
            { old = self.options[k], new = new_options[k] }
         )
      else
         self.options[k] = v
      end
   end
   return self
end

debug.log(wezterm, environment.locale.t, "global", "config_loaded_info", "")

-- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –ø–æ–¥–º–æ–¥—É–ª–µ–π
local set_env = {}

for _, mod in pairs({
  environment.locale and environment.locale.settings,
  environment.colors,
  environment.terminal,
  environment.apps,
  environment.devtools,
}) do
  if type(mod) == "table" then
    for k, v in pairs(mod) do
      if type(v) == "string" then
        set_env[k] = v
      end
    end
  end
end

-- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
debug.log(wezterm, environment.locale.t, "global", "debug_enabled_all", "–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
for key, value in pairs(set_env) do
  if key ~= "PATH" then -- PATH –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    debug.log(wezterm, environment.locale.t, "global", "set_env_var", key, tostring(value))
  end
end

-- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ü–û–°–õ–ï —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('events.right-status').setup()         -- –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ setup
require('events.tab-title').setup()      -- –µ—Å–ª–∏ —Ç–∞–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π setup
require('events.new-tab-button').setup() -- –µ—Å–ª–∏ —Ç–∞–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π setup

-- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è appearance
-- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
local appearance_utils = require("utils.appearance")
appearance_utils.setup_window_centering(wezterm)
local appearance_events = require("config.appearance.events")

-- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏
local debug_manager = require("utils.debug-manager")
debug_manager.setup()
if appearance_events and appearance_events.register then
   appearance_events.register()
end

-- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–æ–≤

-- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏
wezterm.on("close-debug-panel", function(window, pane)
  local current_tab = window:active_tab()
  local panes = current_tab:panes()
  
  -- –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –ø–∞–Ω–µ–ª–∏, –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∏–∂–Ω—é—é
  if #panes > 1 then
    window:perform_action(wezterm.action.ActivatePaneDirection("Down"), window:active_pane())
    window:perform_action(wezterm.action.CloseCurrentPane({ confirm = false }), window:active_pane())
  end
end)wezterm.on("clear-saved-mode", function(window, pane)

-- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤
wezterm.on("update-status-on-key-table-exit", function(window, pane)
  wezterm.log_info("üö® –°–æ–±—ã—Ç–∏–µ update-status-on-key-table-exit –ø–æ–ª—É—á–µ–Ω–æ!")
  local session_status = require("events.session-status")
  session_status.clear_saved_mode()
end)
  wezterm.log_info("üö® –°–æ–±—ã—Ç–∏–µ clear-saved-mode –ø–æ–ª—É—á–µ–Ω–æ!")
  local session_status = require("events.session-status")
  session_status.clear_saved_mode()
end)

-- –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å resurrect

-- –ü–æ–¥–∫–ª—é—á–∞–µ–º smart workspace switcher
local workspace_switcher = wezterm.plugin.require("https://github.com/MLFlexer/smart_workspace_switcher.wezterm")
workspace_switcher.zoxide_path = "/opt/homebrew/bin/zoxide"
require('config.resurrect')

-- –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ bindings
local bindings = require('config.bindings.global')


-- –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã–µ workspace –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
-- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è workspace
require("events.workspace-events").setup()

-- –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
return ConfigClass:init()
  :append(require('config.general'))
  :append(require('config.environment.fonts'))
  :append(require('config.appearance'))
  :append(require('config.launch'))
  :append(bindings)  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º bindings –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ config.bindings
  .options

