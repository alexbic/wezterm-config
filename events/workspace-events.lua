local debug = require("utils.debug")
local wezterm = require('wezterm')

local function register_workspace_events()
  wezterm.on('workspace.switch', function(window, pane)
    wezterm.log_info("üî• –°–û–ë–´–¢–ò–ï workspace.switch –°–†–ê–ë–û–¢–ê–õ–û!")
    
    local choices = {}
    
    -- 1. –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ workspace
    local mux = wezterm.mux
    local active_workspaces = mux.get_workspace_names()
    
    for _, workspace_name in ipairs(active_workspaces) do
      table.insert(choices, {
        id = "active|" .. workspace_name,
        label = "üü¢ " .. workspace_name .. " (–∞–∫—Ç–∏–≤–Ω–∞—è)"
      })
    end
    
    -- 2. –ü–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ workspace
    local paths = require('config.environment.paths')
    local workspace_dir = paths.resurrect_state_dir .. "workspace"
    local cmd = "ls " .. workspace_dir .. "/*.json 2>/dev/null || true"
    local handle = io.popen(cmd)
    if handle then
      for line in handle:lines() do
        local name = line:match("([^/]+)%.json$")
        if name then
          table.insert(choices, {
            id = "saved|workspace|" .. name,
            label = "üíæ " .. name .. " (workspace)"
          })
        end
      end
      handle:close()
    end
    
    -- 3. –ü–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ window –∏ tab
    local other_types = {"window", "tab"}
    for _, state_type in ipairs(other_types) do
      local state_dir = paths.resurrect_state_dir .. state_type
      local cmd = "ls " .. state_dir .. "/*.json 2>/dev/null || true"
      local handle = io.popen(cmd)
      if handle then
        for line in handle:lines() do
          local name = line:match("([^/]+)%.json$")
          if name then
            local icon = state_type == "window" and "ü™ü" or "üìë"
            table.insert(choices, {
              id = "saved|" .. state_type .. "|" .. name,
              label = icon .. " " .. name .. " (" .. state_type .. ")"
            })
          end
        end
        handle:close()
      end
    end
    
    -- 4. –í –∫–æ–Ω—Ü–µ –ø—É—Ç–∏ –∏–∑ zoxide
    local workspace_switcher = require('config.workspace-switcher')
    local zoxide_choices = workspace_switcher.workspace_switcher.choices.get_zoxide_elements({})
    
    for _, choice in ipairs(zoxide_choices) do
      table.insert(choices, {
        id = "zoxide|" .. choice.id,
        label = "üìÅ " .. choice.label .. " (–ø—É—Ç—å)"
      })
    end
    
    if #choices == 0 then
      table.insert(choices, {
        id = "none",
        label = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö workspace"
      })
    end
    
    window:perform_action(
      wezterm.action.InputSelector({
        action = wezterm.action_callback(function(inner_window, inner_pane, id, label)
          -- –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–∏ –ª—é–±–æ–º –≤—ã–±–æ—Ä–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ
          wezterm.emit('clear-saved-mode', inner_window, inner_pane)
          
          if not id or id == "none" then 
            debug.log("workspace", "debug_workspace_cancelled")
            return 
          end
          
          -- –ò—Å–ø–æ–ª—å–∑—É–µ–º | –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–º–µ—Å—Ç–æ :
          local parts = {}
          for part in string.gmatch(id, "[^|]+") do
            table.insert(parts, part)
          end
          
          local action_type = parts[1]
          debug.log("workspace", "debug_workspace_action_type", action_type)
          
          if action_type == "active" then
            local workspace_name = parts[2]
            inner_window:perform_action(
              wezterm.action.SwitchToWorkspace({
                name = workspace_name,
              }),
              inner_window:active_pane()
            )
          elseif action_type == "zoxide" then
            local path = parts[2]
            debug.log("workspace", "debug_workspace_path_switch", path)
            inner_window:perform_action(
              wezterm.action.SwitchToWorkspace({
                name = path,
                spawn = {
                  cwd = path,
                },
              }),
              inner_window:active_pane()
            )
          elseif action_type == "saved" then
            local state_type = parts[2]
            local state_name = parts[3]
            wezterm.log_info("üîß –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å " .. state_type .. " —Å –∏–º–µ–Ω–µ–º: " .. state_name)
            
            local resurrect = require('config.resurrect').resurrect
            local state = resurrect.state_manager.load_state(state_name, state_type)
            
            if state then
              wezterm.log_info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–ª—è " .. state_name)
              
              if state_type == "workspace" then
                local mux_window = inner_window:mux_window()
                local tabs = mux_window:tabs()
                
                for i = #tabs, 2, -1 do
                  local tab = tabs[i]
                  if tab then
                    tab:activate()
                    inner_window:perform_action(wezterm.action.CloseCurrentTab({confirm = false}), tab:active_pane())
                  end
                end
                
                wezterm.time.call_after(0.5, function()
                  resurrect.workspace_state.restore_workspace(state, {
                    window = inner_window:mux_window(),
                    relative = false,
                    restore_text = true,
                    on_pane_restore = resurrect.tab_state.default_on_pane_restore,
                  })
                end)
              elseif state_type == "window" then
                wezterm.log_info("üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º window —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
                resurrect.window_state.restore_window(inner_pane:window(), state, {
                  window = inner_window:mux_window(),
                  relative = true,
                  restore_text = true,
                  on_pane_restore = resurrect.tab_state.default_on_pane_restore,
                })
              elseif state_type == "tab" then
                wezterm.log_info("üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tab —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
                resurrect.tab_state.restore_tab(inner_pane:tab(), state, {
                  relative = true,
                  restore_text = true,
                  on_pane_restore = resurrect.tab_state.default_on_pane_restore,
                })
              end
              wezterm.log_info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " .. state_type .. "/" .. state_name)
            else
              wezterm.log_error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " .. state_name)
            end
          end
        end),
        title = "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ workspace/–ø—É—Ç—å/—Å–æ—Å—Ç–æ—è–Ω–∏–µ",
        description = "üü¢=–∞–∫—Ç–∏–≤–Ω–∞—è üíæ=workspace ü™ü=window üìë=tab üìÅ=–ø—É—Ç—å | ESC=–æ—Ç–º–µ–Ω–∞",
        fuzzy = true,
        choices = choices,
      }),
      pane
    )
  end)
end

return register_workspace_events
