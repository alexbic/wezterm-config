-- utils/dialogs.lua
-- –û–ü–ò–°–ê–ù–ò–ï: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–æ–≤—ã–º–∏ –æ–∫–Ω–∞–º–∏ WezTerm
-- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É: config/dialogs/ ‚Üê‚Üí utils/dialogs.lua
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
-- –ü–û–õ–ù–û–°–¢–¨–Æ –°–ê–ú–û–î–û–°–¢–ê–¢–û–ß–ù–´–ô –ú–û–î–£–õ–¨ - –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
-- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò: –ù–ï–¢

local M = {}

-- ========================================
-- –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–ò–ê–õ–û–ì–û–í (–∏–∑ utils/dialog.lua)
-- ========================================

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–ª–∏–Ω—ã UTF-8 —Å—Ç—Ä–æ–∫–∏
local function utf8_len(str)
  if not str then return 0 end
  local len = 0
  for _ in str:gmatch('[%z\1-\127\194-\244][\128-\191]*') do
    len = len + 1
  end
  return len
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ (–±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏)
local function get_color_value(color_param, default_color)
  if not color_param then return default_color end
  if type(color_param) == "string" and color_param:match("^dialog_") then
    local colors = require("config.environment.colors")
    local env_utils = require("utils.environment")
    return env_utils.get_color(colors, color_param)
  else
    return color_param
  end
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
M.create_dialog_box = function(config)
  local wezterm = require('wezterm')
  
  -- –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  local action_type = config.action_type or "session"
  local icon_key = config.icon_key or "workspace"
  local current_value = config.current_value or "default"
  local default_value = config.default_value
  
  -- –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–ª—é—á, –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ü–≤–µ—Ç
  local function get_color_value(color_param, default_color)
    if not color_param then return default_color end
    if type(color_param) == "string" and color_param:match("^dialog_") then
      local colors = require("config.environment.colors")
      local env_utils = require("utils.environment")
      return env_utils.get_color(colors, color_param)
    else
      return color_param
    end
  end
  
  local border_color = get_color_value(config.border_color, "#BD93F9")
  local content_color = get_color_value(config.content_color, "#F8F8F2")
  local hint_color = get_color_value(config.hint_color, "#FFB86C")
  
  -- –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  local lines = {}
  if config.lines then
    -- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
    lines = config.lines
  else
    -- –ù–æ–≤—ã–π –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —à–∞–±–ª–æ–Ω
    local icons = require("config.environment.icons")
    local env_utils = require("utils.environment")
    local icon = icons.t[icon_key] or "üîß"
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —Ç–∏–ø—É
    local type_names = {
      workspace = "–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è",
      window = "–¢–µ–∫—É—â–µ–µ –æ–∫–Ω–æ", 
      tab = "–¢–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞"
    }
    local display_name = type_names[icon_key] or "–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è"
    
    -- –î–æ–±–∞–≤–ª—è–µ–º placeholder –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–π –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    table.insert(lines, "PLACEHOLDER_FOR_COLORED_FIRST_LINE")
    table.insert(lines, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∏–∂–µ:")
  end
  
  local hint_text = config.hint_text or "enter: ok  esc: cancel"
  local min_width = config.min_width or 40
  local max_width = config.max_width or 80
  local padding = 2

  -- –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  local content_width = 0
  for _, line in ipairs(lines) do
    -- –î–ª—è placeholder –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–ª–∏–Ω—É —Ü–≤–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if line == "PLACEHOLDER_FOR_COLORED_FIRST_LINE" then
      local icons = require("config.environment.icons")
      local env_utils = require("utils.environment")
      local icon = icons.t[icon_key] or "üîß"
      local type_names = {
        workspace = "–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è",
        window = "–¢–µ–∫—É—â–µ–µ –æ–∫–Ω–æ",
        tab = "–¢–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞"
      }
      local display_name = type_names[icon_key] or "–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è"
      local estimated_len = utf8_len(icon .. " " .. display_name .. ": " .. current_value)
      content_width = math.max(content_width, estimated_len)
    else
      content_width = math.max(content_width, utf8_len(line))
    end
  end

  -- –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –ø–æ–¥—Å–∫–∞–∑–∫–∏
  local hint_full = "‚î§ " .. hint_text .. " ‚îú"
  local hint_width = utf8_len(hint_full)
  local min_tail = 4

  -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —à–∏—Ä–∏–Ω—É —Ä–∞–º–∫–∏
  local dynamic_width = math.max(content_width + padding * 2, hint_width + min_tail)
  local box_width = math.max(min_width, math.min(max_width, dynamic_width))
  local inner_width = box_width - 2

  -- –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  local format_elements = {}

  -- –í–µ—Ä—Ö–Ω—è—è —Ä–∞–º–∫–∞
  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚ï≠" .. string.rep("‚îÄ", inner_width) .. "‚ïÆ\n" })

  -- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –≤–µ—Ä—Ö–Ω–µ–π —Ä–∞–º–∫–∏
  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚îÇ" .. string.rep(" ", inner_width) .. "‚îÇ\n" })

  -- –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  for i, line in ipairs(lines) do
    -- –ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–º–∫–æ–π
    table.insert(format_elements, { Foreground = { Color = border_color } })
    table.insert(format_elements, { Text = "‚îÇ" .. string.rep(" ", padding) })

    -- –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è placeholder —Ü–≤–µ—Ç–Ω–æ–π –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    if line == "PLACEHOLDER_FOR_COLORED_FIRST_LINE" then
      local icons = require("config.environment.icons")
      local env_utils = require("utils.environment")
      local icon = icons.t[icon_key] or "üîß"
      
      local type_names = {
        workspace = "–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è",
        window = "–¢–µ–∫—É—â–µ–µ –æ–∫–Ω–æ",
        tab = "–¢–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞"
      }
      local display_name = type_names[icon_key] or "–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è"
      
      -- –ò–∫–æ–Ω–∫–∞ –≤ —Ü–≤–µ—Ç–µ —Ä–∞–º–∫–∏
      table.insert(format_elements, { Foreground = { Color = border_color } })
      table.insert(format_elements, { Text = icon .. " " })
      
      -- –ù–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∏—Ä—é–∑–æ–≤–æ–º
      table.insert(format_elements, { Foreground = { Color = border_color } })
      table.insert(format_elements, { Text = display_name })
      
      -- –î–≤–æ–µ—Ç–æ—á–∏–µ –≤ –±–µ–ª–æ–º
      table.insert(format_elements, { Foreground = { Color = content_color } })
      table.insert(format_elements, { Text = ": " })
      
      -- –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –±–µ–ª–æ–º
      table.insert(format_elements, { Foreground = { Color = content_color } })
      table.insert(format_elements, { Text = current_value })
      
      -- –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ
      local colored_line_len = utf8_len(icon .. " " .. display_name .. ": " .. current_value)
      local remaining = inner_width - padding * 2 - colored_line_len
      if remaining > 0 then
        table.insert(format_elements, { Foreground = { Color = content_color } })
        table.insert(format_elements, { Text = string.rep(" ", remaining) })
      end
    else
      -- –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
      local line_len = utf8_len(line)
      local remaining = inner_width - padding * 2 - line_len
      
      if remaining >= 0 then
        table.insert(format_elements, { Foreground = { Color = content_color } })
        table.insert(format_elements, { Text = line })
        table.insert(format_elements, { Foreground = { Color = content_color } })
        table.insert(format_elements, { Text = string.rep(" ", remaining) })
      else
        -- –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        local max_len = inner_width - padding * 2 - 3
        local truncated = string.sub(line, 1, max_len) .. "..."
        table.insert(format_elements, { Foreground = { Color = content_color } })
        table.insert(format_elements, { Text = truncated })
      end
    end

    -- –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Ä–∞–º–∫–∞
    table.insert(format_elements, { Foreground = { Color = border_color } })
    table.insert(format_elements, { Text = string.rep(" ", padding) })
    table.insert(format_elements, { Foreground = { Color = border_color } })
    table.insert(format_elements, { Text = "‚îÇ\n" })

    -- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
    if i < #lines then
      table.insert(format_elements, { Foreground = { Color = border_color } })
      table.insert(format_elements, { Text = "‚îÇ" .. string.rep(" ", inner_width) .. "‚îÇ\n" })
    end
  end

  -- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∏–∂–Ω–µ–π —Ä–∞–º–∫–æ–π
  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚îÇ" .. string.rep(" ", inner_width) .. "‚îÇ\n" })

  -- –ù–∏–∂–Ω—è—è —Ä–∞–º–∫–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
  local left_border_width = inner_width - hint_width
  if left_border_width < 2 then
    -- –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ–±—Ä–µ–∑–∞–µ–º –µ—ë
    local max_hint_len = inner_width - 6
    hint_text = string.sub(hint_text, 1, max_hint_len)
    hint_full = "‚î§ " .. hint_text .. " ‚îú"
    hint_width = utf8_len(hint_full)
    left_border_width = inner_width - hint_width
  end

  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚ï∞" .. string.rep("‚îÄ", left_border_width) })
  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚î§ " })
  table.insert(format_elements, { Foreground = { Color = hint_color } })
  table.insert(format_elements, { Text = hint_text })
  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = " ‚îú" })
  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚ïØ" })

  return wezterm.format(format_elements)
end

-- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InputSelector –¥–∏–∞–ª–æ–≥–∞
M.create_input_selector = function(config)
  local wezterm = require("wezterm")
  local colors = require("config.environment.colors")
  local env_utils = require("utils.environment")
  
  local title_color = get_color_value(config.title_color or "dialog_border", "#BD93F9")
  local description_color = get_color_value(config.description_color or "dialog_content", "#F8F8F2")
  
  return {
    title = wezterm.format({
      { Foreground = { Color = title_color } },
      { Text = (config.icon or "") .. " " .. (config.title or "–î–∏–∞–ª–æ–≥") }
    }),
    description = config.description or "",
    fuzzy_description = config.fuzzy_description,
    fuzzy = config.fuzzy or false,
    choices = config.choices or {},
    action = config.action
  }
end

-- –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ choice —ç–ª–µ–º–µ–Ω—Ç–∞
M.create_choice = function(config)
  local wezterm = require("wezterm")
  local colors = require("config.environment.colors")
  local env_utils = require("utils.environment")
  
  if config.colored then
    local color = get_color_value(config.color, "#FFFFFF")
    return {
      id = config.id,
      label = wezterm.format({
        { Foreground = { Color = color } },
        { Text = (config.icon or "") .. " " .. (config.text or "") }
      })
    }
  else
    return {
      id = config.id,
      label = (config.icon or "") .. " " .. (config.text or "")
    }
  end
end

-- ========================================
-- F10 SETTINGS MANAGER –§–£–ù–ö–¶–ò–ò
-- ========================================

-- –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é F10 (—Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
M.create_f10_menu_choice = function(wezterm, item, colors, env_utils)
  local environment = require('config.environment')
  local status_icons = {
    ready = "‚úÖ",
    planned = "üîß", 
    ["v2.0"] = "üöÄ"
  }
  
  local status_icon = status_icons[item.status] or "‚ùì"
  -- –ü–æ–ª—É—á–∞–µ–º title –∏ description —á–µ—Ä–µ–∑ –∫–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  local title = environment.locale.t[item.title_key] or item.title_key
  local description = item.description_key and environment.locale.t[item.description_key] or nil
  
  local full_title = status_icon .. " " .. title
  
  if description then
    full_title = full_title .. " - " .. description
  end
  
  return M.create_choice({
    id = item.id,
    icon = item.icon,
    text = full_title,
    colored = (item.status == "ready"),
    color = item.status == "ready" and "#50FA7B" or "#6272A4"
  })
end

-- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é F10 (—Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)  
M.handle_f10_menu_selection = function(wezterm, window, pane, id, existing_managers)
  if not id or id == "exit" or id == "header" then
    return
  end
  
  -- –ì–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏
  if id == "locale_settings" and existing_managers.locale_manager then
    existing_managers.locale_manager.show_locale_manager(window, pane)
    
  elseif id == "debug_settings" and existing_managers.debug_manager then  
    existing_managers.debug_manager.show_panel(window, pane)
    
  -- –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –º–æ–¥—É–ª–∏ (–∑–∞–≥–ª—É—à–∫–∏)
  else
    local messages = {
      keybind_settings = "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
      appearance_settings = "–¢–µ–º—ã –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 
      global_settings = "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
      export_import = "–≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
      help_f1_f12 = "–°–ø—Ä–∞–≤–∫–∞ F1-F12 - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
      ai_settings = "AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤ v2.0"
    }
    
    local message = messages[id] or "–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    window:toast_notification("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", message, nil, 2000)
  end
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é F10 (—Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è)
M.show_f10_main_settings = function(wezterm, window, pane, menu_data, existing_managers)
  -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
  local tab = window:active_tab()
  local environment = require('config.environment')
  local title = environment.locale.t[menu_data.title_key] or "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WezTerm"
  tab:set_title(title)
  
  local colors = require("config.environment.colors")
  local env_utils = require("utils.environment")
  local choices = {}
  
  -- –ó–∞–≥–æ–ª–æ–≤–æ–∫
  table.insert(choices, M.create_choice({
    id = "header",
    icon = "üõ†Ô∏è", 
    text = menu_data.title,
    colored = true,
    color = "#BD93F9"
  }))
  
  -- –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
  for _, item in ipairs(menu_data.menu_items) do
    table.insert(choices, M.create_f10_menu_choice(wezterm, item, colors, env_utils))
  end
  
  -- –í—ã—Ö–æ–¥
  table.insert(choices, M.create_choice({
    id = "exit",
    icon = "üö™",
    text = "–í—ã—Ö–æ–¥"
  }))
  
  -- –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
  local selector_config = M.create_input_selector({
    title = menu_data.title,
    description = menu_data.description,
    choices = choices,
    action = wezterm.action_callback(function(inner_window, inner_pane, id, label)
      M.handle_f10_menu_selection(wezterm, inner_window, inner_pane, id, existing_managers)
    end)
  })
  
  window:perform_action(wezterm.action.InputSelector(selector_config), pane)
end

return M

