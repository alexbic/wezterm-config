-- cat > ~/.config/wezterm/utils/dialogs.lua << 'EOF'
--
-- –û–ü–ò–°–ê–ù–ò–ï: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
-- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —Ä–∞–º–∫–∞–º–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏.
--
-- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò: wezterm, config.environment

local wezterm = require 'wezterm'

local M = {}

-- === –¢–ò–ü–´ –î–ò–ê–õ–û–ì–û–í ===
M.DIALOG_TYPES = {
  SAVE_WORKSPACE = "save_workspace",
  SAVE_WINDOW = "save_window",
  SAVE_TAB = "save_tab"
}

-- === –§–£–ù–ö–¶–ò–Ø –ü–û–î–°–ß–ï–¢–ê –î–õ–ò–ù–´ UTF-8 –°–¢–†–û–ö–ò ===
local function utf8_len(str)
  if not str then return 0 end
  local len = 0
  for _ in str:gmatch('[%z\1-\127\194-\244][\128-\191]*') do
    len = len + 1
  end
  return len
end

-- === –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –†–ê–ú–ö–ò –ß–ï–†–ï–ó wezterm.format ===
local function create_format_box(lines_data, hint_text, border_color, content_color, hint_color)
  local min_width = 40
  local max_width = 80
  local pad = 2

  -- –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  local content_width = 0
  for _, line_data in ipairs(lines_data) do
    local line_len = 0
    for _, part in ipairs(line_data) do
      if part.text then
        line_len = line_len + utf8_len(part.text)
      end
    end
    content_width = math.max(content_width, line_len)
  end

  -- –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  local hint_full = "‚î§ " .. hint_text .. " ‚îú"
  local hint_width = utf8_len(hint_full)
  local min_tail = 4 -- –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ö–≤–æ—Å—Ç–∏–∫ —Å–ø—Ä–∞–≤–∞

  -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —à–∏—Ä–∏–Ω—É —Ä–∞–º–∫–∏
  local dynamic_width = math.max(content_width + pad * 2, hint_width + min_tail)
  local box_width = math.max(min_width, math.min(max_width, dynamic_width))
  local inner_width = box_width - 2  -- –±–µ–∑ —Ä–∞–º–æ–∫ ‚îÇ ‚îÇ

  -- –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  local format_elements = {}

  -- –í–µ—Ä—Ö–Ω—è—è —Ä–∞–º–∫–∞
  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚ï≠" .. string.rep("‚îÄ", inner_width) .. "‚ïÆ\n" })

  -- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –≤–µ—Ä—Ö–Ω–µ–π —Ä–∞–º–∫–∏
  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚îÇ" .. string.rep(" ", inner_width) .. "‚îÇ\n" })

  -- –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  for i, line_data in ipairs(lines_data) do
    -- –ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–º–∫–æ–π
    table.insert(format_elements, { Foreground = { Color = border_color } })
    table.insert(format_elements, { Text = "‚îÇ" .. string.rep(" ", pad) })

    -- –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏ —Å —Ü–≤–µ—Ç–∞–º–∏
    local line_len = 0
    for _, part in ipairs(line_data) do
      if part.color then
        table.insert(format_elements, { Foreground = { Color = part.color } })
      else
        table.insert(format_elements, { Foreground = { Color = content_color } })
      end
      if part.text then
        table.insert(format_elements, { Text = part.text })
        line_len = line_len + utf8_len(part.text)
      end
    end

    -- –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–∞–º–∏
    local remaining = inner_width - pad * 2 - line_len
    if remaining > 0 then
      table.insert(format_elements, { Foreground = { Color = content_color } })
      table.insert(format_elements, { Text = string.rep(" ", remaining) })
    end

    -- –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Ä–∞–º–∫–∞
    table.insert(format_elements, { Text = string.rep(" ", pad) })
    table.insert(format_elements, { Foreground = { Color = border_color } })
    table.insert(format_elements, { Text = "‚îÇ\n" })

    -- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
    if i < #lines_data then
      table.insert(format_elements, { Foreground = { Color = border_color } })
      table.insert(format_elements, { Text = "‚îÇ" .. string.rep(" ", inner_width) .. "‚îÇ\n" })
    end
  end

  -- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∏–∂–Ω–µ–π —Ä–∞–º–∫–æ–π
  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚îÇ" .. string.rep(" ", inner_width) .. "‚îÇ\n" })

  -- –ù–∏–∂–Ω—è—è —Ä–∞–º–∫–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
  local left_border_width = inner_width - hint_width
  if left_border_width < 2 then
    -- –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ–±—Ä–µ–∑–∞–µ–º –µ—ë
    local max_hint_len = inner_width - 6 -- ‚î§ ‚îú + –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ —Ä–∞–º–∫–∏
    hint_text = string.sub(hint_text, 1, max_hint_len)
    hint_full = "‚î§ " .. hint_text .. " ‚îú"
    hint_width = utf8_len(hint_full)
    left_border_width = inner_width - hint_width
  end

  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚ï∞" .. string.rep("‚îÄ", left_border_width) })
  table.insert(format_elements, { Foreground = { Color = hint_color } })
  table.insert(format_elements, { Text = hint_full })
  table.insert(format_elements, { Foreground = { Color = border_color } })
  table.insert(format_elements, { Text = "‚ïØ" })

  return format_elements
end

-- === –°–û–ó–î–ê–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø –î–ò–ê–õ–û–ì–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø ===
M.create_save_description = function(wezterm, dialog_type, current_info, environment, icons, colors, env_utils)
  local t = environment.locale.t

  -- –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
  local dialog_colors = {
    [M.DIALOG_TYPES.SAVE_WORKSPACE] = {
      border = env_utils.get_color(colors, "dialog_save_border") or "#50FA7B",
      content = env_utils.get_color(colors, "dialog_content") or "#F8F8F2",
      hint = env_utils.get_color(colors, "dialog_hint") or "#FFB86C"
    },
    [M.DIALOG_TYPES.SAVE_WINDOW] = {
      border = env_utils.get_color(colors, "dialog_border") or "#BD93F9",
      content = env_utils.get_color(colors, "dialog_content") or "#F8F8F2",
      hint = env_utils.get_color(colors, "dialog_hint") or "#FFB86C"
    },
    [M.DIALOG_TYPES.SAVE_TAB] = {
      border = env_utils.get_color(colors, "dialog_delete_border") or "#FF5555",
      content = env_utils.get_color(colors, "dialog_content") or "#F8F8F2",
      hint = env_utils.get_color(colors, "dialog_hint") or "#FFB86C"
    }
  }

  local color_scheme = dialog_colors[dialog_type] or dialog_colors[M.DIALOG_TYPES.SAVE_WORKSPACE]

  -- –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  local lines_data = {}

  -- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞
  if dialog_type == M.DIALOG_TYPES.SAVE_WORKSPACE then
    local workspace_icon = env_utils.get_icon(icons, "workspace")
    table.insert(lines_data, {
      { text = workspace_icon .. " " .. t("save_workspace_tab_title"), color = color_scheme.content }
    })
    
    table.insert(lines_data, {
      { text = t("current_workspace", current_info or "default"), color = color_scheme.content }
    })
  elseif dialog_type == M.DIALOG_TYPES.SAVE_WINDOW then
    local window_icon = env_utils.get_icon(icons, "window")
    table.insert(lines_data, {
      { text = window_icon .. " " .. t("save_window_tab_title"), color = color_scheme.content }
    })
    
    table.insert(lines_data, {
      { text = t("save_window_default", current_info or "window"), color = color_scheme.content }
    })
  elseif dialog_type == M.DIALOG_TYPES.SAVE_TAB then
    local tab_icon = env_utils.get_icon(icons, "tab")
    table.insert(lines_data, {
      { text = tab_icon .. " " .. t("save_tab_tab_title"), color = color_scheme.content }
    })
    
    table.insert(lines_data, {
      { text = t("save_tab_default", current_info or "tab"), color = color_scheme.content }
    })
  end

  -- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
  table.insert(lines_data, {
    { text = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∏–∂–µ:", color = color_scheme.content }
  })

  -- –°–æ–∑–¥–∞–µ–º —Ä–∞–º–∫—É
  local format_elements = create_format_box(
    lines_data,
    "enter: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å  esc: –æ—Ç–º–µ–Ω–∞",
    color_scheme.border,
    color_scheme.content,
    color_scheme.hint
  )

  return wezterm.format(format_elements)
end

-- === –°–û–ó–î–ê–ù–ò–ï –î–ò–ê–õ–û–ì–ê –ó–ê–ì–†–£–ó–ö–ò ===
M.create_load_description = function(wezterm, sessions_count, environment, icons, colors, env_utils)
  local t = environment.locale.t
  
  local color_scheme = {
    border = env_utils.get_color(colors, "dialog_load_border") or "#8BE9FD",
    content = env_utils.get_color(colors, "dialog_content") or "#F8F8F2",
    hint = env_utils.get_color(colors, "dialog_hint") or "#FFB86C"
  }

  local lines_data = {
    {
      { text = "üìÇ " .. t("loading_sessions_title"), color = color_scheme.content }
    },
    {
      { text = t("loading_sessions_description"), color = color_scheme.content }
    },
    {
      { text = string.format("–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: %d", sessions_count or 0), color = color_scheme.content }
    }
  }

  local format_elements = create_format_box(
    lines_data,
    "enter: –∑–∞–≥—Ä—É–∑–∏—Ç—å  /: –ø–æ–∏—Å–∫  esc: –æ—Ç–º–µ–Ω–∞",
    color_scheme.border,
    color_scheme.content,
    color_scheme.hint
  )

  return wezterm.format(format_elements)
end

-- === –°–û–ó–î–ê–ù–ò–ï –î–ò–ê–õ–û–ì–ê –£–î–ê–õ–ï–ù–ò–Ø ===
M.create_delete_description = function(wezterm, sessions_count, environment, icons, colors, env_utils)
  local t = environment.locale.t
  
  local color_scheme = {
    border = env_utils.get_color(colors, "dialog_delete_border") or "#FF5555",
    content = env_utils.get_color(colors, "dialog_content") or "#F8F8F2",
    hint = env_utils.get_color(colors, "dialog_hint") or "#FFB86C"
  }

  local lines_data = {
    {
      { text = "üóëÔ∏è " .. t("deleting_sessions_title"), color = color_scheme.content }
    },
    {
      { text = t("deleting_sessions_description"), color = color_scheme.content }
    },
    {
      { text = string.format("–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: %d", sessions_count or 0), color = color_scheme.content }
    }
  }

  local format_elements = create_format_box(
    lines_data,
    "enter: —É–¥–∞–ª–∏—Ç—å  /: –ø–æ–∏—Å–∫  esc: –æ—Ç–º–µ–Ω–∞",
    color_scheme.border,
    color_scheme.content,
    color_scheme.hint
  )

  return wezterm.format(format_elements)
end

return M
